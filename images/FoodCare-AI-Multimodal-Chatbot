import tkinter as tk
from tkinter import filedialog, simpledialog
from PIL import Image, ImageTk
import cv2
import numpy as np
from tensorflow.keras.models import load_model

# Predefined chatbot responses
responses = {
    "hello": "Hi there! How can I assist you?",
    "how are you": "I'm just a bot, but I'm doing great! How about you?",
    "what is your name": "I'm ChatBot, your virtual assistant.",
    "bye": "Goodbye! Have a great day! Please provide a rating (1-5):",
    "food is spoiled": "Sir, please upload an image of the spoiled food. I will verify it for you.",
    "my food is cold": "I apologize. Could you provide an image for verification?",
    "help": "You can ask me about food spoilage. If your food is spoiled, type 'food is spoiled' and upload an image."
}

# Load the trained CNN model
try:
    cnn = load_model('C:\\Users\\kottu\\Desktop\\connect\\pythonProject\\vgg191_multilabel_model_sample.keras')
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

class_names = ['good_items', 'spoiled_items']  # Adjust based on model

def get_response(user_input):
    """Fetch response based on user input."""
    user_input = user_input.lower()
    return responses.get(user_input, "I'm sorry, I don't understand that.")

def classify_food(image_path):
    """Classify the uploaded food image using the CNN model."""
    chat_window.config(state=tk.NORMAL)
    chat_window.insert(tk.END, "\U0001F916: Processing image...\n\n", "bot")
    chat_window.config(state=tk.DISABLED)
    chat_window.yview(tk.END)

    frame = cv2.imread(image_path)
    if frame is None:
        return "Error: Unable to load image."

    img = cv2.resize(frame, (224, 224))
    img = img / 255.0  # Normalize
    img = np.expand_dims(img, axis=0)
    predictions = cnn.predict(img)

    threshold = 0.5
    predicted_label = class_names[1] if predictions[0][0] >= threshold else class_names[0]

    if predicted_label == 'spoiled_items':
        return "Sir, I apologize for the inconvenience. Your food is spoiled. You can claim a refund."
    else:
        return "Sir, your food is not spoiled. Refund cannot be processed."

def upload_image():
    """Open a file dialog to select an image, display it in chat, and classify it."""
    file_path = filedialog.askopenfilename(filetypes=[("Image Files", ".jpg;.png;*.jpeg")])
    if file_path:
        # Display image in chatbot
        image = Image.open(file_path)
        image = image.resize((150, 150), Image.Resampling.LANCZOS)
        img_tk = ImageTk.PhotoImage(image)

        img_label = tk.Label(chat_window, image=img_tk)
        img_label.image = img_tk  # Keep a reference
        chat_window.window_create(tk.END, window=img_label)
        chat_window.insert(tk.END, "\n")

        # Classify image and show result
        result = classify_food(file_path)
        chat_window.config(state=tk.NORMAL)
        chat_window.insert(tk.END, f"\U0001F916: {result}\n\n", "bot")
        chat_window.config(state=tk.DISABLED)
        chat_window.yview(tk.END)
    else:
        chat_window.config(state=tk.NORMAL)
        chat_window.insert(tk.END, "\U0001F916: No image selected.\n\n", "bot")
        chat_window.config(state=tk.DISABLED)
        chat_window.yview(tk.END)

def send_message(event=None):
    """Handle the user input and display chatbot response."""
    user_message = user_input.get()
    if user_message.strip():
        chat_window.config(state=tk.NORMAL)
        chat_window.insert(tk.END, f"\U0001F63A: {user_message}\n", "user")
        response = get_response(user_message)
        chat_window.insert(tk.END, f"\U0001F916: {response}\n\n", "bot")
        chat_window.config(state=tk.DISABLED)
        chat_window.yview(tk.END)
        user_input.delete(0, tk.END)

        if user_message.lower() in [ "food is spoiled","my vegetables are rotten","the food looks rotten","my apple are rotten","my banana are rotten"," my mango are rooten"

]:
            upload_image()
        elif user_message.lower() in ["bye", "goodbye", "thanks"]:
            get_rating()

def get_rating():
    """Prompt the user for a rating between 1 and 5 and display the response in chat."""
    rating = simpledialog.askinteger("Rate Us", "Please rate this chat (1-5):", minvalue=1, maxvalue=5)
    if rating:
        chat_window.config(state=tk.NORMAL)
        chat_window.insert(tk.END, f"\U0001F916: Thank you for your rating: {rating}/5!\n\n", "bot")
        chat_window.insert(tk.END, "\U0001F916: We appreciate your feedback!\n\n", "bot")
        chat_window.config(state=tk.DISABLED)
        chat_window.yview(tk.END)

def clear_chat():
    """Clear the chat window."""
    chat_window.config(state=tk.NORMAL)
    chat_window.delete(1.0, tk.END)
    chat_window.config(state=tk.DISABLED)

# Set up the main application window
root = tk.Tk()
root.title("ChatBot with Food Spoilage Detection")

# Chat window
chat_window = tk.Text(root, height=20, width=50, state=tk.DISABLED, wrap=tk.WORD)
chat_window.tag_configure("user", justify="right", foreground="blue")
chat_window.tag_configure("bot", justify="left", foreground="green")
chat_window.pack(pady=10)

# Input field
user_input = tk.Entry(root, width=50)
user_input.pack(pady=10)
user_input.bind("<Return>", send_message)

# Send button
send_button = tk.Button(root, text="Send", command=send_message)
send_button.pack()

# Clear button
clear_button = tk.Button(root, text="Clear", command=clear_chat)
clear_button.pack()

# Quit button
quit_button = tk.Button(root, text="Quit", command=root.quit)
quit_button.pack()

# Run the application
root.mainloop()
